---
title: "final_project"
author: "Group 10"
format: 
  html:
    toc: true
    toc_float: true
  pdf:
    documentclass: report
    toc: true
    toc_float: true
    includes:
      in-header: header.tex
    pdf-engine: xelatex
editor: visual
---

# Importing Necessary packages

```{r, echo = FALSE, include=FALSE}
library(janitor)
library(tidyverse)
library(readxl)
library(dplyr)
library(ggplot2)
library(scales)
library(ggrepel)
library(patchwork)
library(forcats)
library(writexl)
library(fuzzyjoin)
library(stringdist)
library(httr)
library(xml2)
library(rvest)
```


# Reading, Cleaning & Preparing Fuel Comsumption Dataset

```{r}
# Importing datasets for fuels except electric vehicles and hybrids
data15_19 = read.csv("fuel_consumption/2015_2019.csv")
data20 = read.csv("fuel_consumption/2020.csv")
data21 = read.csv("fuel_consumption/2021.csv")
data22 = read.csv("fuel_consumption/2022.csv")
data23 = read.csv("fuel_consumption/2023.csv")
data24 = read.csv("fuel_consumption/2024.csv")

# Binding all fuel datasets together
data_fuel_15_24 = rbind(data15_19, data20, data21, data22, data23, data24)

data_fuel_15_24 = clean_names(data_fuel_15_24)


# Creating the same column names to ensure they match across ev/hybrid and fuel datasets
data_fuel_15_24 = add_column(data_fuel_15_24, motor_kw = NA, .after = 4)
data_fuel_15_24 = add_column(data_fuel_15_24, recharge_time_h = NA, .after = 9)
data_fuel_15_24 = add_column(data_fuel_15_24, city_kwh_100_km = NA, .after = 13)
data_fuel_15_24 = add_column(data_fuel_15_24, highway_kwh_100_km = NA, .after = 14)
data_fuel_15_24 = add_column(data_fuel_15_24, combined_kwh_100_km = NA, .after = 15)
data_fuel_15_24 = add_column(data_fuel_15_24, range_km = NA, .after = 16)


# View(data_fuel_15_24)
tail(data_fuel_15_24)
```

```{r}
# Importing datasets for EVs and hybrids
data_ev_15_24 = read_xlsx("fuel_consumption/Battery_Electric_2015_2024.xlsx")
data_hybrid_15_24 = read.csv("fuel_consumption/Plugin_Hybrid_2015_2024.csv")

# formatting column headings in snake case
data_hybrid_15_24 = clean_names(data_hybrid_15_24)

data_hybrid_15_24 = data_hybrid_15_24 %>% select(-combined_le_100_km, -range_1_km,
                                                 -fuel_type_2)
# renaming some columns
data_hybrid_15_24 = data_hybrid_15_24 %>% 
  rename(motor_kw = motor_k_w,
         fuel_type = fuel_type_1,
         range_km = range_2_km)

# creating and arranging columns to fit desired dataframes
data_hybrid_15_24 = add_column(data_hybrid_15_24, city_kwh_100_km = NA, .after = 13)
data_hybrid_15_24 = add_column(data_hybrid_15_24, highway_kwh_100_km = NA, .after = 14)
data_hybrid_15_24 = add_column(data_hybrid_15_24, combined_kwh_100_km = NA, .after = 15)

head(data_hybrid_15_24)

```

```{r}

data_ev_15_24 = clean_names(data_ev_15_24)

# renaming some columns
data_ev_15_24 = data_ev_15_24 %>% 
  rename(motor_kw = motor_k_w,
         city_kwh_100_km = city_k_wh_100_km,
         highway_kwh_100_km = highway_k_wh_100_km,
         combined_kwh_100_km = combined_k_wh_100_km)


data_ev_15_24 = data_ev_15_24 %>% select(-city_le_100_km, -highway_le_100_km,
                                                 -combined_le_100_km)


data_ev_15_24 = data_ev_15_24 %>% select(model_year, make, model, vehicle_class, 
                                         motor_kw, transmission, fuel_type,
                                         recharge_time_h, city_kwh_100_km, highway_kwh_100_km,
                                         combined_kwh_100_km, range_km, co2_emissions_g_km,
                                         co2_rating, smog_rating)

# Creating the same column names to ensure they match across ev and hybrid datasets
data_ev_15_24 = add_column(data_ev_15_24, engine_size_l = NA, .after = 5)
data_ev_15_24 = add_column(data_ev_15_24, cylinders = NA, .after = 6)
data_ev_15_24 = add_column(data_ev_15_24, city_l_100_km = NA, .after = 10)
data_ev_15_24 = add_column(data_ev_15_24, highway_l_100_km = NA, .after = 11)
data_ev_15_24 = add_column(data_ev_15_24, combined_l_100_km = NA, .after = 12)


head(data_hybrid_15_24)

# combining ev and hybrid datasets
data_ev_hybrid_15_24 = rbind(data_ev_15_24, data_hybrid_15_24)

# Creating the same column names to ensure they match across ev/hybrid and fuel datasets
data_ev_hybrid_15_24 = add_column(data_ev_hybrid_15_24, combined_mpg = NA, .before = 18)

tail(data_ev_hybrid_15_24)
```

```{r}

# Creating A complete dataset of all types of fuel
all_data_15_24 = rbind(data_fuel_15_24, data_ev_hybrid_15_24)

# Rearranging the data to specification
all_data_15_24 = all_data_15_24 %>% 
  arrange(model_year, make, model, vehicle_class)


#  Re-categorizing categories on fuel type
all_data_15_24$fuel_type = fct_recode(all_data_15_24$fuel_type,
                                      "regular" = "X",
                                      "electric" = "B",
                                      "diesel" = "D",
                                      "e85" = "E",
                                      "premium" = "Z",
                                      "natural gas" = "N",
                                      "regular" = "X",
                                      "electric/regular" = "B/X",
                                      "electric/regular" = "B/X*",
                                      "electric/premium" = "B/Z",
                                      "electric/premium" = "B/Z*")


# Saving dataset to an Excel file
write.csv(all_data_15_24, "all_data_15_24.csv")

head(all_data_15_24)



```

# Cleaning, Reading & Preparing Fuel Price Dataset

Specify this to your path

```{r, include=FALSE}

fuel_prices <- read_csv("18100001.csv")

head(fuel_prices)
```

```{r}
fuel_prices <- fuel_prices %>% 
  janitor::clean_names()

head(fuel_prices)
```

```{r}
fuel_prices <- fuel_prices %>% 
  filter(ref_date >= "2016-01")

fuel_prices
```

```{r}
fuel_prices <- fuel_prices %>% 
  select(
    -`dguid`,
    -`uom`,
    -`uom_id`,
    -`scalar_factor`,
    -`scalar_id`,
    -`vector`,
    -`coordinate`,
    -`status`,
    -`symbol`,
    -`terminated`,
    -`decimals`
  ) 

  
fuel_prices <- fuel_prices %>% 
  rename(fuel_type = type_of_fuel,
         value_cents_l = value)

head(fuel_prices)
```

```{r}
fuel_prices <- fuel_prices %>% 
  mutate(fuel_type = str_replace_all(
    fuel_type, c(
      "Regular unleaded gasoline at self service filling stations" = "regular",
      "Premium unleaded gasoline at self service filling stations" = "premium",
      "Diesel fuel at self service filling stations"= "diesel")
  ))

fuel_prices <- fuel_prices %>% 
  filter(fuel_type != "Household heating fuel")

fuel_prices <- fuel_prices %>% 
  #separate(geo, into = c("city", "province"), sep = ",") %>% 
  separate(ref_date, into = c("year", "month"), sep = "-")

fuel_prices %>% 
  arrange(year, month, fuel_type, geo)


```

## Picking relevant years from fuel price data and averaging across

```{r}
average_fuel_prices = fuel_prices %>%
  group_by(year, month, fuel_type) %>% 
  mutate(average_fuel_price = round(mean(value_cents_l, na.rm = TRUE), 2)) %>% 
  arrange(year, fuel_type, month, geo)


average_fuel_prices = fuel_prices |> 
  group_by(year, month, fuel_type) |>
  summarise(average_fuel_price = round(mean(value_cents_l, na.rm = TRUE), 2))


head(average_fuel_prices)
```

# Joining up both datasets

```{r}
# test_join = all_data_15_24 |> 
#   left_join(average_fuel_prices %>% filter(year >= 2020),
#             by = c("fuel_type")) 


test_join = all_data_15_24 |> 
  left_join(average_fuel_prices,
            by = c("fuel_type")) 

# creating a column to capture average yearly fuel prices by fuel type
test_join = test_join %>% 
  group_by(year, fuel_type) %>% 
  mutate(avg_fuel_price_yr = round(mean(average_fuel_price, na.rm = TRUE), 2))

# creating a column to capture average fuel prices by fuel type
test_join = test_join %>% 
  group_by(fuel_type) %>% 
  mutate(avg_fuel_type_price = round(mean(avg_fuel_price_yr, na.rm = TRUE), 2))

# Rearranging columns for convenience
test_join = test_join %>% 
  select(model_year, make, model, vehicle_class, motor_kw, engine_size_l,
         cylinders, transmission, fuel_type, year, month, average_fuel_price,
         avg_fuel_price_yr, avg_fuel_type_price, recharge_time_h, city_l_100_km, 
         highway_l_100_km, combined_l_100_km, city_kwh_100_km, highway_kwh_100_km, 
         combined_kwh_100_km, range_km, combined_mpg, co2_emissions_g_km, 
         co2_rating, smog_rating)

head(test_join)

```

## Filling in electric fuel prices on joined dataset

```{r}

test_join = test_join %>% 
  filter(!fuel_type %in% c("e85", "natural gas"))


# I fill 'electric' fuel type price with average public charging price in 2024
test_join = test_join %>% 
  mutate(average_fuel_price = ifelse(
    fuel_type == "electric", 43, average_fuel_price
  ))
```

## Creating electric/regular and electric/premium fuel prices on joined dataset

```{r}

# Calculate the average price for premium fuel
premium_price <- test_join %>%
  filter(fuel_type == "premium") %>%
  summarise(avg_price = mean(avg_fuel_type_price, na.rm = TRUE)) %>%
  pull(avg_price)


# Calculate the average price for regular fuel
regular_price <- test_join %>%
  filter(fuel_type == "regular") %>%
  summarise(avg_price = mean(avg_fuel_type_price, na.rm = TRUE)) %>%
  pull(avg_price)

```

## Filling in electric/premium/regular fuel prices on joined dataset

```{r}

# Mutate to compute the new value for electric/regular fuel type
test_join = test_join %>%
  mutate(
    average_fuel_price = case_when(
      fuel_type == "electric/premium" ~ (premium_price + 43) / 2,
      fuel_type == "electric/regular" ~ (regular_price + 43) / 2,
      TRUE ~ average_fuel_price
  ),
  
  avg_fuel_price_yr = case_when(
      fuel_type == "electric/premium" ~ (premium_price + 43) / 2,
      fuel_type == "electric/regular" ~ (regular_price + 43) / 2,
      fuel_type == "electric" ~ 43,
      TRUE ~ avg_fuel_price_yr),
  
  avg_fuel_type_price = case_when(
      fuel_type == "electric/premium" ~ (premium_price + 43) / 2,
      fuel_type == "electric/regular" ~ (regular_price + 43) / 2,
      fuel_type == "electric" ~ 43,
      TRUE ~ avg_fuel_type_price)
  )

write.csv(test_join, "fuel_consumption_prices.csv")

tail(test_join)
```



```{r}
# creating a column to capture average yearly fuel prices by fuel type
test_join %>% 
  group_by(model_year, make) %>% 
  summarise(fuel_price_vehicle = round(mean(average_fuel_price, na.rm = TRUE), 2)) %>% 
  arrange(model_year, make) %>% 
  select(model_year, make)


# Capturing the first 4 words in the 'model' column and replace it in the column
test_join$model <- str_extract(test_join$model, paste0("\\b(\\w+\\b\\s*){1,4}"))

# write.csv(unique_models, "unique_models.csv")
```

# Scraping Vehicle Pricing Data From Autotrader

## Used Car Prices

You can uncomment the code to run the scraper. However, you do not need to as you can read in the data scraped from AutoTradaer's website.

```{r}
# 
# # used vehicle prices
# base_url = "https://www.autotrader.ca/cars/on/guelph/?rcp=100&rcs=%d&srt=8&yRng=2016%%2C2024&prx=100&prv=Ontario&loc=N1G%%202W1&fuel=Diesel%%2CElectric%%2CFlex%%20Fuel%%2CGas%%2FElectric%%20Hybrid%%2CGasoline%%2CUnknown&hprc=True&wcp=True&sts=Used&inMarket=advancedSearch"
# 
# # number of pages to scrape
# num_pages = 169
# 
# # Generating list of URLs for all pages
# page_urls = sprintf(base_url, seq(0, (num_pages - 1) * 100, by = 100))
# 
#   
# # creating a function to scrape data from a single page
# scrape_page = function(url){
#   page = read_html(url)
#   
#   # Extracting desired elements
#   car_make_model = page %>% html_elements("span.title-with-trim") %>% html_text(trim = TRUE)
#   car_prices = page %>% html_elements("span.price-amount") %>% html_text(trim = TRUE)
#   car_mileage = page %>% html_elements("span.odometer-proximity") %>% html_text(trim = TRUE)
#   
#   # Check mileage is missing for some vehicles and fill with NAs if missing
#   if (length(car_mileage) < length(car_make_model)) {
#     car_mileage = c(car_mileage, rep(NA, length(car_make_model) - length(car_mileage)))
#   }
#   
#   # Log the URL and number of items found
#   cat("Scraping:", url, "\n")
#   cat("Titles found:", length(car_make_model), " Prices found:", length(car_prices), 
#       " Mileage found:", length(car_mileage), "\n")
#   
#   # Handle empty results
#   if (length(car_make_model) == 0 && length(car_prices) == 0) {
#     cat("No data found for:", url, "\n")
#     return(data.frame(car_make_model = character(), price = character(),
#                       car_mileage = character()))
#   }
#   
#   # combining into a dataframe
#   data.frame(
#     car_specs = car_make_model,
#     price = car_prices,
#     mileage = car_mileage,
#     stringAsFactors = FALSE
#   )
# }
# 
# 
# # Scraping all pages and combine results
# vehicle_used_prices = map_dfr(page_urls, function(url){
#   
#   # Delay before each request
#   Sys.sleep(2)
#   
#   # Call scrape_page
#   scrape_page(url)
# })
# 
# 
# 
# # Viewing combined data
# View(vehicle_used_prices)


```

## New Vehicle Prices

```{r}

# # new vehicle prices
# base_url = "https://www.autotrader.ca/cars/on/guelph/?rcp=100&rcs=%d&srt=4&yRng=2016%%2C2024&prx=100&prv=Ontario&loc=N1G%%202W1&fuel=Diesel%%2CElectric%%2CFlex%%20Fuel%%2CGas%%2FElectric%%20Hybrid%%2CGasoline%%2CUnknown&hprc=True&wcp=True&sts=New&showcpo=1&inMarket=advancedSearch"
# 
# 
# 
# # Generating list of URLs for all pages
# page_urls = sprintf(base_url, seq(0, (num_pages - 1) * 100, by = 100))
# 
# 
# # Scraping all pages and combine results
# vehicle_prices = map_dfr(page_urls, function(url){
#   
#   # Delay before each request
#   Sys.sleep(4)
#   
#   # Call scrape_page
#   scrape_page(url)
# })
# 
# 
# # Viewing combined data
# View(vehicle_prices)



# page = read_html(base_url)
# page
# car_prices = page %>% html_elements("span.price-amount") %>% html_text(trim = TRUE)
# 
# car_prices
```

```{r}

# write.csv(vehicle_prices, "vehicle_new_prices.csv")
# write.csv(vehicle_used_prices, "vehicle_used_prices.csv")

vehicle_prices = read.csv("vehicle_new_prices.csv")
vehicle_used_prices = read.csv("vehicle_used_prices.csv")
```

```{r}
# Dropping stringAsFactors column in both datasets
vehicle_prices = vehicle_prices %>% select(-stringAsFactors)
vehicle_used_prices = vehicle_used_prices %>% select(-stringAsFactors)


# renaming some columns
vehicle_prices = vehicle_prices %>% 
  rename(new_price = price)

vehicle_used_prices = vehicle_used_prices %>% 
  rename(used_price = price)

# Creating the same column names to ensure they match across ev/hybrid and fuel datasets
vehicle_prices = add_column(vehicle_prices, used_price = NA, .after = 2)
vehicle_used_prices = add_column(vehicle_used_prices, new_price = NA, .after = 1)


# Binding datasets together
final_vehicle_prices = rbind(vehicle_prices, vehicle_used_prices)


final_vehicle_prices = final_vehicle_prices %>% 
  arrange(car_specs)


  
```

```{r}

# vehicle makes with two words in a list
two_words_vehicle_make =  c("Aston Martin", "Alfa Romeo", "Land Rover")


final_vehicle_prices =  final_vehicle_prices %>%
  mutate(
    Year = sub("^([0-9]{4}) .*", "\\1", car_specs), # Extract the year
    Make = case_when(
      grepl(paste(two_words_vehicle_make, collapse = "|"), car_specs) ~
        sub("^[0-9]{4} (([^ ]+ ){1}[^ ]+).*", "\\1", car_specs), # Extract exactly two words for Make
      TRUE ~ sub("^[0-9]{4} ([^ ]+).*", "\\1", car_specs)        # For single-word makes
    ),

    ModelTrim = case_when(
      grepl(paste(two_words_vehicle_make, collapse = "|"), car_specs) ~
        sub("^[0-9]{4} (([^ ]+ ){2})(.+)", "\\3", car_specs), # Extract the rest for two-word makes
      TRUE ~ sub("^[0-9]{4} [^ ]+ (.+)", "\\1", car_specs)    # Extract model and trim for single-word makes
    ),

    # ModelTrim = str_replace_all(ModelTrim, "[-/|~]", " ") # Replace slashes and dashes with spaces
  ) %>%
  separate(ModelTrim, into = c("Model", "Trim"), sep = " (?=[^ ]+$|-|/|~)", extra = "merge", fill = "right") # Split model and trim



# cleaning column names for vehicle prices
final_vehicle_prices = clean_names(final_vehicle_prices)


# letting model select first four words
final_vehicle_prices$model = str_extract(final_vehicle_prices$model, paste0("\\b([\\w-]+\\b\\s*){1,4}"))

# Convert all character columns to UTF-8 encoding in both datasets
final_vehicle_prices <- final_vehicle_prices %>%
  mutate(across(where(is.character), ~ iconv(., from = "", to = "UTF-8")))

test_join <- test_join %>%
  mutate(across(where(is.character), ~ iconv(., from = "", to = "UTF-8")))

# all_data_15_24



# Perform approximate string matching
mapped_data <- fuzzyjoin::stringdist_join(
  final_vehicle_prices, test_join,
  by = "model",
  method = "jw",
  max_dist = 0.235,
  mode = "left",
  distance_col = "dist"
) %>%
  group_by(model.x) %>%
  slice_min(order_by = dist, n = 1) %>%
  ungroup() %>%
  select(original_model = model.x, matched_model = model.y)



unique_rows = unique(mapped_data)


sum(is.na(unique_rows$matched_model))


# Updating 'final_vehicle_prices' dataset with matched model
final_vehicle_prices = final_vehicle_prices %>%
  left_join(unique_rows, by = c("model" = "original_model")) %>%
  mutate(model = coalesce(matched_model, model)) %>%
  select(-matched_model)


# Updating 'test_join' dataset with matched model
test_join = test_join %>%
  left_join(unique_rows, by = c("model" = "original_model")) %>%
  mutate(model = coalesce(matched_model, model)) %>%
  select(-matched_model)


# selecting specific columns
final_vehicle_prices = final_vehicle_prices %>%
  select(year, make, model, new_price, used_price, mileage)

# renaming year to model_year
final_vehicle_prices = final_vehicle_prices %>%
  rename(model_year = year)


# Removing dollar sign
final_vehicle_prices = final_vehicle_prices %>%
  mutate(used_price = gsub("[\\$,]", "", used_price),
         new_price = gsub("[\\$,]", "", new_price),
         mileage = gsub("[\\km,]", "", mileage))


# Converting currency signs to integers
final_vehicle_prices$used_price = as.integer(as.character(final_vehicle_prices$used_price))
final_vehicle_prices$new_price = as.integer(as.character(final_vehicle_prices$new_price))
final_vehicle_prices$mileage = as.integer(as.character(final_vehicle_prices$mileage))



final_vehicle_prices = final_vehicle_prices %>%
  group_by(model_year, make, model) %>%
  summarise(avg_used_price = round(mean(used_price), 2),
         avg_new_price = round(mean(new_price), 2),
         avg_mileage = round(mean(mileage))) %>%
  arrange(model_year, make, model, avg_used_price, avg_new_price, avg_mileage)
  
```

## Filling in Missing Values For New & Used Prices & Mileage

```{r}

# Filling missing values for mileage with zero where vehicles are new
final_vehicle_prices = final_vehicle_prices %>% 
  group_by(model_year, make, model) %>% 
  mutate(avg_mileage = ifelse(is.na(avg_mileage) & model_year >= 2023, 0, median(avg_mileage, na.rm = TRUE))) %>% 
  ungroup()


# Estimates of new vehicle prices for older models
final_vehicle_prices = final_vehicle_prices %>% 
  group_by(make, model) %>% 
  mutate(avg_new_price = ifelse(is.na(avg_new_price), median(avg_new_price, na.rm = TRUE), avg_new_price)) %>% 
  ungroup()%>%
  group_by(make) %>%
  mutate(avg_new_price = ifelse(is.na(avg_new_price), median(avg_new_price, na.rm = TRUE), avg_new_price)) %>%
  ungroup()



# Remaining Models are mostly expensive makes or are not vehicle types our users would care about
final_vehicle_prices %>%
  filter(is.na(final_vehicle_prices$avg_new_price))%>%
  select(make) %>% 
  distinct()



# Filling remaining models based on the mileage values for those models
final_vehicle_prices = final_vehicle_prices %>%
  mutate(
    avg_new_price = case_when(is.na(avg_new_price) & avg_mileage<50000 ~ avg_used_price + 50000,
                              is.na(avg_new_price) & avg_mileage >= 50000 & avg_mileage < 200000 ~ avg_used_price + 75000,
                              is.na(avg_new_price) & avg_mileage >= 200000 ~ avg_used_price + 100000,
                              TRUE ~ avg_new_price))


# Filling used prices with zeros where the model is relatively new and would not have any mileage on it.
final_vehicle_prices = final_vehicle_prices %>% 
  mutate(
    avg_used_price = case_when(is.na(avg_used_price) ~ 0,
                               TRUE ~ avg_used_price)
  )



write.csv(final_vehicle_prices, "final_vehicle_prices.csv")
```

# Joining All Three Datasets

```{r}
final_vehicle_prices <- final_vehicle_prices %>%
  mutate(model_year = as.numeric(model_year))

# joining fuel consumption ratings, fuel price data & vehicle price data
complete_dataset = test_join %>% 
  filter(model_year >= 2016)|> 
  left_join(final_vehicle_prices,
            by = c("model_year", "make", "model")) 


# removing columns without vehicle price information
complete_dataset = complete_dataset %>%
  filter(!is.na(avg_used_price))


head(complete_dataset)


write.csv(complete_dataset, "vehicle_fuel_prices.csv")
```


```{r}
fill_dataset <- function(df) {
  df[] <- lapply(df, function(col) {
    if (is.numeric(col)) {
      # Replace NA with 0 for numeric columns
      col[is.na(col)] <- 0
    } else {
      # Replace NA with "NA" for categorical columns
      col[is.na(col)] <- "NA"
    }
    return(col)
  })
  return(df)
}


# Apply the function to the dataset
complete_dataset <- fill_dataset(complete_dataset)


# Grouping transmission information into auto & manual & fuel types into appropriate for app convenience
complete_dataset <- complete_dataset %>% 
  mutate(
    transmission_type = ifelse(grepl("^A", transmission), "Automatic", "Manual"),
    
    fuel_type_choice = case_when(
      fuel_type %in% c("electric/premium", "electric/regular") ~ "Hybrid",
      fuel_type == "electric" ~ "Electric",
      fuel_type %in% c("regular", "premium", "diesel") ~ "gas/diesel",
      TRUE ~ fuel_type)
  )



# regrouping and selecting preferred columns
complete_dataset = complete_dataset %>% 
  select(model_year, make, model, vehicle_class, avg_used_price, avg_new_price, 
         avg_mileage, motor_kw, engine_size_l, cylinders, transmission, transmission_type,
         fuel_type, fuel_type_choice, year, month, average_fuel_price,
         avg_fuel_price_yr, avg_fuel_type_price, recharge_time_h, city_l_100_km, 
         highway_l_100_km, combined_l_100_km, city_kwh_100_km, highway_kwh_100_km, 
         combined_kwh_100_km, range_km, combined_mpg, co2_emissions_g_km, 
         co2_rating, smog_rating)



head(complete_dataset)
```

```{r}
write.csv(complete_dataset, "vehicle_prices_nafilled.csv")
```