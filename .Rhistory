fuel_prices <- fuel_prices %>%
select(
-`dguid`,
-`uom`,
-`uom_id`,
-`scalar_factor`,
-`scalar_id`,
-`vector`,
-`coordinate`,
-`status`,
-`symbol`,
-`terminated`,
-`decimals`
)
fuel_prices <- fuel_prices %>%
rename(fuel_type = type_of_fuel,
value_cents_l = value)
fuel_prices
fuel_prices <- fuel_prices %>%
mutate(fuel_type = str_replace_all(
fuel_type, c(
"Regular unleaded gasoline at self service filling stations" = "regular",
"Premium unleaded gasoline at self service filling stations" = "premium",
"Diesel fuel at self service filling stations"= "diesel")
))
fuel_prices <- fuel_prices %>%
filter(fuel_type != "Household heating fuel")
fuel_prices <- fuel_prices %>%
#separate(geo, into = c("city", "province"), sep = ",") %>%
separate(ref_date, into = c("year", "month"), sep = "-")
fuel_prices %>%
arrange(year, month, fuel_type, geo)
average_fuel_prices = fuel_prices %>%
group_by(year, month, fuel_type) %>%
mutate(average_fuel_price = round(mean(value_cents_l, na.rm = TRUE), 2)) %>%
arrange(year, fuel_type, month, geo)
average_fuel_prices = fuel_prices |>
group_by(year, month, fuel_type) |>
summarise(average_fuel_price = round(mean(value_cents_l, na.rm = TRUE), 2))
head(average_fuel_prices)
head(all_data_15_24)
test_join = all_data_15_24 |>
left_join(average_fuel_prices %>% filter(year >= 2020),
by = c("fuel_type"))
# creating a column to capture average yearly fuel prices by fuel type
test_join = test_join %>%
group_by(year, fuel_type) %>%
mutate(avg_fuel_price_yr = round(mean(average_fuel_price, na.rm = TRUE), 2))
# creating a column to capture average fuel prices by fuel type
test_join = test_join %>%
group_by(fuel_type) %>%
mutate(avg_fuel_type_price = round(mean(avg_fuel_price_yr, na.rm = TRUE), 2))
# Rearranging columns for convenience
test_join = test_join %>%
select(model_year, make, model, vehicle_class, motor_kw, engine_size_l,
cylinders, transmission, fuel_type, year, month, average_fuel_price,
avg_fuel_price_yr, avg_fuel_type_price, recharge_time_h, city_l_100_km,
highway_l_100_km, combined_l_100_km, city_kwh_100_km, highway_kwh_100_km,
combined_kwh_100_km, range_km, combined_mpg, co2_emissions_g_km,
co2_rating, smog_rating)
View(test_join)
View(test_join %>%
filter(fuel_type == "electric/premium"))
test_join = test_join %>%
filter(!fuel_type %in% c("e85", "natural gas"))
# I fill 'electric' fuel type price with average public charging price in 2024
test_join = test_join %>%
mutate(average_fuel_price = ifelse(
fuel_type == "electric", 40, average_fuel_price
))
# Calculate the average price for premium fuel
premium_price <- test_join %>%
filter(fuel_type == "premium") %>%
summarise(avg_price = mean(avg_fuel_type_price, na.rm = TRUE)) %>%
pull(avg_price)
# Calculate the average price for regular fuel
regular_price <- test_join %>%
filter(fuel_type == "regular") %>%
summarise(avg_price = mean(avg_fuel_type_price, na.rm = TRUE)) %>%
pull(avg_price)
# Mutate to compute the new value for electric/regular fuel type
test_join = test_join %>%
mutate(
average_fuel_price = case_when(
fuel_type == "electric/premium" ~ (premium_price + 40) / 2,
fuel_type == "electric/regular" ~ (regular_price + 40) / 2,
TRUE ~ average_fuel_price
),
avg_fuel_price_yr = case_when(
fuel_type == "electric/premium" ~ (premium_price + 40) / 2,
fuel_type == "electric/regular" ~ (regular_price + 40) / 2,
TRUE ~ avg_fuel_price_yr),
avg_fuel_type_price = case_when(
fuel_type == "electric/premium" ~ (premium_price + 40) / 2,
fuel_type == "electric/regular" ~ (regular_price + 40) / 2,
TRUE ~ avg_fuel_type_price)
)
tail(test_join)
# Saving dataset to an Excel file
# write.csv(test_join, "fuel_consumption_prices.csv")
# creating a column to capture average yearly fuel prices by fuel type
test_join %>%
group_by(model_year, make) %>%
summarise(fuel_price_vehicle = round(mean(average_fuel_price, na.rm = TRUE), 2)) %>%
arrange(model_year, make) %>%
select(model_year, make)
# write.csv(unique_models, "unique_models.csv")
# used vehicle prices
base_url = "https://www.autotrader.ca/cars/on/guelph/?rcp=100&rcs=%d&srt=8&yRng=2016%%2C2024&prx=100&prv=Ontario&loc=N1G%%202W1&fuel=Diesel%%2CElectric%%2CFlex%%20Fuel%%2CGas%%2FElectric%%20Hybrid%%2CGasoline%%2CUnknown&hprc=True&wcp=True&sts=Used&inMarket=advancedSearch"
# number of pages to scrape
num_pages = 169
# Generating list of URLs for all pages
page_urls = sprintf(base_url, seq(0, (num_pages - 1) * 100, by = 100))
# creating a function to scrape data from a single page
scrape_page = function(url){
page = read_html(url)
# Extracting desired elements
car_make_model = page %>% html_elements("span.title-with-trim") %>% html_text(trim = TRUE)
car_prices = page %>% html_elements("span.price-amount") %>% html_text(trim = TRUE)
# Log the URL and number of items found
cat("Scraping:", url, "\n")
cat("Titles found:", length(car_make_model), " Prices found:", length(car_prices), "\n")
# Handle empty results
if (length(car_make_model) == 0 && length(car_prices) == 0) {
cat("No data found for:", url, "\n")
return(data.frame(car_make_model = character(), price = character()))
}
# combining into a dataframe
data.frame(
car_specs = car_make_model,
price = car_prices,
stringAsFactors = FALSE
)
}
# Scraping all pages and combine results
vehicle_used_prices = map_dfr(page_urls, function(url){
# Delay before each request
Sys.sleep(2)
# Call scrape_page
scrape_page(url)
})
# Viewing combined data
# head(vehicle_prices)
View(vehicle_used_prices)
# new vehicle prices
base_url = "https://www.autotrader.ca/cars/on/guelph/?rcp=100&rcs=%d&srt=4&yRng=2016%%2C2024&prx=100&prv=Ontario&loc=N1G%%202W1&fuel=Diesel%%2CElectric%%2CFlex%%20Fuel%%2CGas%%2FElectric%%20Hybrid%%2CGasoline%%2CUnknown&hprc=True&wcp=True&sts=New&showcpo=1&inMarket=advancedSearch"
# number of pages to scrape
num_pages = 169
# num_pages = 15
# Generating list of URLs for all pages
page_urls = sprintf(base_url, seq(0, (num_pages - 1) * 100, by = 100))
# creating a function to scrape data from a single page
scrape_page = function(url){
page = read_html(url)
# Extracting desired elements
car_make_model = page %>% html_elements("span.title-with-trim") %>% html_text(trim = TRUE)
car_prices = page %>% html_elements("span.price-amount") %>% html_text(trim = TRUE)
# Log the URL and number of items found
cat("Scraping:", url, "\n")
cat("Titles found:", length(car_make_model), " Prices found:", length(car_prices), "\n")
# Handle empty results
if (length(car_make_model) == 0 && length(car_prices) == 0) {
cat("No data found for:", url, "\n")
return(data.frame(car_make_model = character(), price = character()))
}
# combining into a dataframe
data.frame(
car_specs = car_make_model,
price = car_prices,
stringAsFactors = FALSE
)
}
# Scraping all pages and combine results
vehicle_prices = map_dfr(page_urls, function(url){
# Delay before each request
Sys.sleep(2)
# Call scrape_page
scrape_page(url)
})
# Viewing combined data
head(vehicle_prices)
# Viewing combined data
View(vehicle_prices)
# Dropping stringAsFactors column in both datasets
vehicle_prices = vehicle_prices %>% select(-stringAsFactors)
vehicle_used_prices = vehicle_used_prices %>% select(-stringAsFactors)
# renaming some columns
vehicle_prices = vehicle_prices %>%
rename(new_price = price)
vehicle_used_prices = vehicle_used_prices %>%
rename(used_price = price)
# Creating the same column names to ensure they match across ev/hybrid and fuel datasets
vehicle_prices = add_column(vehicle_prices, used_price = NA, .after = 2)
vehicle_used_prices = add_column(vehicle_used_prices, new_price = NA, .after = 1)
# Binding datasets together
final_vehicle_prices = rbind(vehicle_prices, vehicle_used_prices)
final_vehicle_prices = final_vehicle_prices %>%
arrange(car_specs)
View(final_vehicle_prices)
# Use regular expressions to extract the components
final_vehicle_prices <- final_vehicle_prices %>%
mutate(
Year = sub("^([0-9]{4}) .*", "\\1", car_specs),                # Extract the year
Make = sub("^[0-9]{4} ([A-Za-z]+) .*", "\\1", car_specs),     # Extract the make
ModelTrim = sub("^[0-9]{4} [A-Za-z]+ (.+)", "\\1", car_specs) # Extract the rest
) %>%
separate(ModelTrim, into = c("Model", "Trim"), sep = " (?=[^ ]+$|)", extra = "merge", fill = "right") # Split model and trim
# cleaning column names for vehicle prices
final_vehicle_prices = clean_names(final_vehicle_prices)
# filtering columns for vehicle prices
final_vehicle_prices = final_vehicle_prices %>%
select(year, make, model, new_price, used_price)
# transforming currency columns to appropriate values
final_vehicle_prices = final_vehicle_prices %>%
mutate(new_price = if_else(is.na(new_price), NA_integer_, as.integer(gsub("\\$", "", new_price))),
used_price = if_else(is.na(used_price), NA_integer_, as.integer(gsub("\\$", "", used_price))))
# View the result
View(final_vehicle_prices)
# Viewing combined data
View(vehicle_prices)
# Binding datasets together
final_vehicle_prices = rbind(vehicle_prices, vehicle_used_prices)
final_vehicle_prices = final_vehicle_prices %>%
arrange(car_specs)
View(final_vehicle_prices)
# Use regular expressions to extract the components
final_vehicle_prices <- final_vehicle_prices %>%
mutate(
Year = sub("^([0-9]{4}) .*", "\\1", car_specs),                # Extract the year
Make = sub("^[0-9]{4} ([A-Za-z]+) .*", "\\1", car_specs),     # Extract the make
ModelTrim = sub("^[0-9]{4} [A-Za-z]+ (.+)", "\\1", car_specs) # Extract the rest
) %>%
separate(ModelTrim, into = c("Model", "Trim"), sep = " (?=[^ ]+$|)", extra = "merge", fill = "right") # Split model and trim
# cleaning column names for vehicle prices
final_vehicle_prices = clean_names(final_vehicle_prices)
# filtering columns for vehicle prices
final_vehicle_prices = final_vehicle_prices %>%
select(year, make, model, new_price, used_price)
# transforming currency columns to appropriate values
final_vehicle_prices %>%
mutate(new_price = if_else(is.na(new_price), NA_integer_, as.integer(gsub("\\$", "", new_price))),
used_price = if_else(is.na(used_price), NA_integer_, as.integer(gsub("\\$", "", used_price))))
# transforming currency columns to appropriate values
final_vehicle_prices %>%
mutate(new_price = if_else(is.na(new_price), NA_integer_, as.integer(gsub("\\$", "", new_price))),
used_price = if_else(is.na(used_price), NA_integer_, as.integer(gsub("\\$", "", used_price))))
final_vehicle_prices %>%
mutate(
new_price = case_when(
is.na(new_price) ~ NA_integer_,
TRUE ~ as.integer(gsub("\\$", "", new_price))
),
used_price = case_when(
is.na(used_price) ~ NA_integer_,
TRUE ~ as.integer(gsub("\\$", "", used_price))
)
)
# Binding datasets together
final_vehicle_prices = rbind(vehicle_prices, vehicle_used_prices)
final_vehicle_prices = final_vehicle_prices %>%
arrange(car_specs)
View(final_vehicle_prices)
head(final_vehicle_prices)
# Use regular expressions to extract the components
final_vehicle_prices <- final_vehicle_prices %>%
mutate(
Year = sub("^([0-9]{4}) .*", "\\1", car_specs),                # Extract the year
Make = sub("^[0-9]{4} ([A-Za-z]+) .*", "\\1", car_specs),     # Extract the make
ModelTrim = sub("^[0-9]{4} [A-Za-z]+ (.+)", "\\1", car_specs) # Extract the rest
) %>%
separate(ModelTrim, into = c("Model", "Trim"), sep = " (?=[^ ]+$|)", extra = "merge", fill = "right") # Split model and trim
# cleaning column names for vehicle prices
final_vehicle_prices = clean_names(final_vehicle_prices)
# filtering columns for vehicle prices
final_vehicle_prices = final_vehicle_prices %>%
select(year, make, model, new_price, used_price)
final_vehicle_prices %>%
gsub("\\$", "", new_price)
# filtering columns for vehicle prices
final_vehicle_prices = final_vehicle_prices %>%
select(year, make, model, new_price, used_price)
final_vehicle_prices %>%
gsub("\\$", "", new_price)
final_vehicle_prices %>%
mutate(new_price = gsub("\\$", "", new_price))
# Binding datasets together
final_vehicle_prices = rbind(vehicle_prices, vehicle_used_prices)
final_vehicle_prices = final_vehicle_prices %>%
arrange(car_specs)
# Use regular expressions to extract the components
final_vehicle_prices <- final_vehicle_prices %>%
mutate(
Year = sub("^([0-9]{4}) .*", "\\1", car_specs),                # Extract the year
Make = sub("^[0-9]{4} ([A-Za-z]+) .*", "\\1", car_specs),     # Extract the make
ModelTrim = sub("^[0-9]{4} [A-Za-z]+ (.+)", "\\1", car_specs) # Extract the rest
) %>%
separate(ModelTrim, into = c("Model", "Trim"), sep = " (?=[^ ]+$|)", extra = "merge", fill = "right") # Split model and trim
# Use regular expressions to extract the components
final_vehicle_prices <- final_vehicle_prices %>%
mutate(
Year = sub("^([0-9]{4}) .*", "\\1", car_specs),                # Extract the year
Make = sub("^[0-9]{4} ([A-Za-z]+) .*", "\\1", car_specs),     # Extract the make
ModelTrim = sub("^[0-9]{4} [A-Za-z]+ (.+)", "\\1", car_specs) # Extract the rest
) %>%
separate(ModelTrim, into = c("Model", "Trim"), sep = " (?=[^ ]+$|)", extra = "merge", fill = "right") # Split model and trim
# cleaning column names for vehicle prices
final_vehicle_prices = clean_names(final_vehicle_prices)
# filtering columns for vehicle prices
final_vehicle_prices = final_vehicle_prices %>%
select(year, make, model, new_price, used_price)
final_vehicle_prices %>%
mutate(used_price = gsub("\\$", "", used_price))
# Binding datasets together
final_vehicle_prices = rbind(vehicle_prices, vehicle_used_prices)
final_vehicle_prices = final_vehicle_prices %>%
arrange(car_specs)
# Use regular expressions to extract the components
final_vehicle_prices <- final_vehicle_prices %>%
mutate(
Year = sub("^([0-9]{4}) .*", "\\1", car_specs),                # Extract the year
Make = sub("^[0-9]{4} ([A-Za-z]+) .*", "\\1", car_specs),     # Extract the make
ModelTrim = sub("^[0-9]{4} [A-Za-z]+ (.+)", "\\1", car_specs) # Extract the rest
) %>%
separate(ModelTrim, into = c("Model", "Trim"), sep = " (?=[^ ]+$|)", extra = "merge", fill = "right") # Split model and trim
# Use regular expressions to extract the components
final_vehicle_prices <- final_vehicle_prices %>%
mutate(
Year = sub("^([0-9]{4}) .*", "\\1", car_specs),                # Extract the year
Make = sub("^[0-9]{4} ([A-Za-z]+) .*", "\\1", car_specs),     # Extract the make
ModelTrim = sub("^[0-9]{4} [A-Za-z]+ (.+)", "\\1", car_specs) # Extract the rest
) %>%
separate(ModelTrim, into = c("Model", "Trim"), sep = " (?=[^ ]+$|)", extra = "merge", fill = "right") # Split model and trim
# cleaning column names for vehicle prices
final_vehicle_prices = clean_names(final_vehicle_prices)
# filtering columns for vehicle prices
final_vehicle_prices = final_vehicle_prices %>%
select(year, make, model, new_price, used_price)
# Removing dollar sign & Converting currency signs to integers
final_vehicle_prices %>%
mutate(used_price = gsub("\\$", "", used_price),
new_price = gsub("\\$", "", new_price)) %>%
as.integer(used_price)
# Removing dollar sign & Converting currency signs to integers
final_vehicle_prices %>%
mutate(used_price = gsub("\\$", "", used_price),
new_price = gsub("\\$", "", new_price))
# Removing dollar sign & Converting currency signs to integers
final_vehicle_prices = final_vehicle_prices %>%
mutate(used_price = gsub("\\$", "", used_price),
new_price = gsub("\\$", "", new_price))
# Converting currency signs to integers
final_vehicle_prices %>%
as.integer(used_price)
# Converting currency signs to integers
final_vehicle_prices %>%
as.integer(final_vehicle_prices$used_price)
# Converting currency signs to integers
# final_vehicle_prices %>%
as.integer(final_vehicle_prices$used_price)
head(final_vehicle_prices)
# Converting currency signs to integers
# final_vehicle_prices %>%
final_vehicle_prices = as.integer(final_vehicle_prices$used_price)
head(final_vehicle_prices)
# Binding datasets together
final_vehicle_prices = rbind(vehicle_prices, vehicle_used_prices)
final_vehicle_prices = final_vehicle_prices %>%
arrange(car_specs)
View(final_vehicle_prices)
# Use regular expressions to extract the components
final_vehicle_prices <- final_vehicle_prices %>%
mutate(
Year = sub("^([0-9]{4}) .*", "\\1", car_specs),                # Extract the year
Make = sub("^[0-9]{4} ([A-Za-z]+) .*", "\\1", car_specs),     # Extract the make
ModelTrim = sub("^[0-9]{4} [A-Za-z]+ (.+)", "\\1", car_specs) # Extract the rest
) %>%
separate(ModelTrim, into = c("Model", "Trim"), sep = " (?=[^ ]+$|)", extra = "merge", fill = "right") # Split model and trim
# filtering columns for vehicle prices
final_vehicle_prices = final_vehicle_prices %>%
select(year, make, model, new_price, used_price)
# cleaning column names for vehicle prices
final_vehicle_prices = clean_names(final_vehicle_prices)
# filtering columns for vehicle prices
final_vehicle_prices = final_vehicle_prices %>%
select(year, make, model, new_price, used_price)
# Removing dollar sign
final_vehicle_prices = final_vehicle_prices %>%
mutate(used_price = gsub("\\$", "", used_price),
new_price = gsub("\\$", "", new_price))
# Converting currency signs to integers
# final_vehicle_prices %>%
as.integer(as.character(final_vehicle_prices$used_price))
# Removing dollar sign
final_vehicle_prices = final_vehicle_prices %>%
mutate(used_price = gsub("[\\$,]", "", used_price),
new_price = gsub("[\\$,]", "", new_price))
View(final_vehicle_prices)
head(final_vehicle_prices)
# Converting currency signs to integers
# final_vehicle_prices %>%
as.integer(as.character(final_vehicle_prices$used_price))
# Converting currency signs to integers
# final_vehicle_prices %>%
final_vehicle_prices$used_price = as.integer(as.character(final_vehicle_prices$used_price))
head(final_vehicle_prices)
final_vehicle_prices$new_price = as.integer(as.character(final_vehicle_prices$new_price))
head(final_vehicle_prices)
# View the result
View(final_vehicle_prices)
final_vehicle_prices %>%
group_by(year, make, model) %>%
mutate(avg_used_price = round(mean(used_price, na.rm = TRUE), 2),
avg_new_price = round(mean(new_price, na.rm = TRUE), 2))
final_vehicle_prices %>%
group_by(year, make, model) %>%
mutate(avg_used_price = round(mean(used_price, na.rm = TRUE), 2),
avg_new_price = round(mean(new_price, na.rm = TRUE), 2)) %>%
select(year, make, model, avg_used_price, avg_new_price)
final_vehicle_prices %>%
group_by(year, make, model) %>%
summarise(avg_used_price = round(mean(used_price, na.rm = TRUE), 2),
avg_new_price = round(mean(new_price, na.rm = TRUE), 2)) %>%
select(year, make, model, avg_used_price, avg_new_price)
# filtering columns for vehicle prices
final_vehicle_prices = final_vehicle_prices %>%
select(-trim)
# Binding datasets together
final_vehicle_prices = rbind(vehicle_prices, vehicle_used_prices)
final_vehicle_prices = final_vehicle_prices %>%
arrange(car_specs)
View(final_vehicle_prices)
# Use regular expressions to extract the components
final_vehicle_prices <- final_vehicle_prices %>%
mutate(
Year = sub("^([0-9]{4}) .*", "\\1", car_specs),                # Extract the year
Make = sub("^[0-9]{4} ([A-Za-z]+) .*", "\\1", car_specs),     # Extract the make
ModelTrim = sub("^[0-9]{4} [A-Za-z]+ (.+)", "\\1", car_specs) # Extract the rest
) %>%
separate(ModelTrim, into = c("Model", "Trim"), sep = " (?=[^ ]+$|)", extra = "merge", fill = "right") # Split model and trim
# Use regular expressions to extract the components
final_vehicle_prices <- final_vehicle_prices %>%
mutate(
Year = sub("^([0-9]{4}) .*", "\\1", car_specs),                # Extract the year
Make = sub("^[0-9]{4} ([A-Za-z]+) .*", "\\1", car_specs),     # Extract the make
ModelTrim = sub("^[0-9]{4} [A-Za-z]+ (.+)", "\\1", car_specs) # Extract the rest
) %>%
separate(ModelTrim, into = c("Model", "Trim"), sep = " (?=[^ ]+$|)", extra = "merge", fill = "right") # Split model and trim
# cleaning column names for vehicle prices
final_vehicle_prices = clean_names(final_vehicle_prices)
View(final_vehicle_prices)
# filtering columns for vehicle prices
final_vehicle_prices = final_vehicle_prices %>%
select(-trim)
final_vehicle_prices = final_vehicle_prices %>%
select(year, make, model, new_price, used_price)
# Removing dollar sign
final_vehicle_prices = final_vehicle_prices %>%
mutate(used_price = gsub("[\\$,]", "", used_price),
new_price = gsub("[\\$,]", "", new_price))
# Converting currency signs to integers
final_vehicle_prices$used_price = as.integer(as.character(final_vehicle_prices$used_price))
final_vehicle_prices$new_price = as.integer(as.character(final_vehicle_prices$new_price))
final_vehicle_prices %>%
group_by(year, make, model) %>%
summarise(avg_used_price = round(mean(used_price, na.rm = TRUE), 2),
avg_new_price = round(mean(new_price, na.rm = TRUE), 2))
# View the result
View(final_vehicle_prices)
final_vehicle_prices %>%
group_by(year, make, model) %>%
summarise(avg_used_price = round(mean(used_price, na.rm = TRUE), 2),
avg_new_price = round(mean(new_price, na.rm = TRUE), 2)) %>%
arrange(year, make, model, avg_used_price, avg_new_price)
final_vehicle_prices %>%
group_by(year, make, model) %>%
summarise(avg_used_price = round(mean(used_price), 2),
avg_new_price = round(mean(new_price), 2)) %>%
arrange(year, make, model, avg_used_price, avg_new_price)
# Binding datasets together
final_vehicle_prices = rbind(vehicle_prices, vehicle_used_prices)
final_vehicle_prices = final_vehicle_prices %>%
arrange(car_specs)
# Use regular expressions to extract the components
final_vehicle_prices <- final_vehicle_prices %>%
mutate(
Year = sub("^([0-9]{4}) .*", "\\1", car_specs),                # Extract the year
Make = sub("^[0-9]{4} ([^ ]+).*", "\\1", car_specs),     # Extract the make
ModelTrim = sub("^[0-9]{4} [A-Za-z]+ (.+)", "\\1", car_specs) # Extract the rest
) %>%
separate(ModelTrim, into = c("Model", "Trim"), sep = " (?=[^ ]+$|)", extra = "merge", fill = "right") # Split model and trim
# cleaning column names for vehicle prices
final_vehicle_prices = clean_names(final_vehicle_prices)
# View the result
View(final_vehicle_prices)
# filtering columns for vehicle prices
final_vehicle_prices = final_vehicle_prices %>%
select(-trim)
final_vehicle_prices = final_vehicle_prices %>%
select(year, make, model, new_price, used_price)
# Removing dollar sign
final_vehicle_prices = final_vehicle_prices %>%
mutate(used_price = gsub("[\\$,]", "", used_price),
new_price = gsub("[\\$,]", "", new_price))
# Converting currency signs to integers
final_vehicle_prices$used_price = as.integer(as.character(final_vehicle_prices$used_price))
final_vehicle_prices$new_price = as.integer(as.character(final_vehicle_prices$new_price))
final_vehicle_prices %>%
group_by(year, make, model) %>%
summarise(avg_used_price = round(mean(used_price), 2),
avg_new_price = round(mean(new_price), 2)) %>%
arrange(year, make, model, avg_used_price, avg_new_price)
write.csv(final_vehicle_prices, "vehicle_prices.csv")
